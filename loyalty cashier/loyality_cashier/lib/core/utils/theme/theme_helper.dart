import 'package:flutter/material.dart';
import 'package:loyality_cashier/core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.deepOrange800,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.blueGray600,
          fontSize: 13.fSize,
          fontFamily: 'Sen',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray300,
          fontSize: 12.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 24.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 13.fSize,
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: appTheme.deepOrange800,
          fontSize: 10.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 18.fSize,
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light();
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => const Color(0XFFF4D150);

  // Black
  Color get black900 => const Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => const Color(0XFFD9D9D9);
  Color get blueGray600 => const Color(0XFF646982);
  Color get blueGray900 => const Color(0XFF333333);
  Color get blueGray90001 => const Color(0XFF31343D);
  Color get blueGray90002 => const Color(0XFF2F3548);

  // BlueGrayAd
  Color get blueGray100Ad => const Color(0XADD7DAE0);

  // DeepOrange
  Color get deepOrange800 => const Color(0XFFD1512D);

  // DeepOrangeAE
  Color get deepOrangeA700E5 => const Color(0XE5FE1414);

  // Gray
  Color get gray100 => const Color(0XFFF5F5F5);
  Color get gray200 => const Color(0XFFF0ECE6);
  Color get gray300 => const Color(0XFFDDDDDD);
  Color get gray400 => const Color(0XFFBBBBBB);
  Color get gray600 => const Color(0XFF7A7777);
  Color get gray60001 => const Color(0XFF777777);
  Color get gray60033 => const Color(0X33966E56);
  Color get gray800 => const Color(0XFF444444);
  Color get gray900 => const Color(0XFF1A1A1A);


  // Blue
  Color get blue100 => const Color(0XFFCAD6FF);

 


  Color get gray30001 => const Color(0XFFE3E3E3);


  Color get gray700 => const Color(0XFF616161);

  Color get gray80001 => const Color(0XFF444444);


  // GrayCc
  Color get gray500Cc => const Color(0XCC9F9F9F);

  // Lime
  Color get lime900 => const Color(0XFF755B00);

  // Orange
  Color get orangeA200 => const Color(0XFFDC9E42);

  // Pink
  Color get pink300 => const Color(0XFFFF54A0);

  // RedAE
  Color get redA100E5 => const Color(0XE5FC8888);

  // Red
  Color get redA70087 => const Color(0X87FF0000);
  Color get orange100 =>const Color.fromARGB(255, 244, 180, 163);
  // White
  Color get whiteA700 => const Color(0XFFFFFFFF);
  // GrayCc

}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
